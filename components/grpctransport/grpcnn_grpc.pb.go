// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpctransport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcServiceNNClient is the client API for GrpcServiceNN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcServiceNNClient interface {
	PingNN(ctx context.Context, in *EmptyMessageNN, opts ...grpc.CallOption) (*EmptyMessageNN, error)
	GetFace(ctx context.Context, in *GetFaceRequest, opts ...grpc.CallOption) (*GetFaceResponse, error)
	PredictFromBytes(ctx context.Context, in *PredictFromBytesRequest, opts ...grpc.CallOption) (*PhotosToModelResponse, error)
	LoadWeigths(ctx context.Context, in *EmptyMessageNN, opts ...grpc.CallOption) (*EmptyMessageNN, error)
	FitAllToModel(ctx context.Context, in *FitAllToModelRequest, opts ...grpc.CallOption) (*EmptyMessageNN, error)
	GetStatusOfFit(ctx context.Context, in *EmptyMessageNN, opts ...grpc.CallOption) (*FitStatusResponseNN, error)
	CutBackgroundAndValidFace(ctx context.Context, in *CutBackgroundAndValidFaceRequest, opts ...grpc.CallOption) (*CutBackgroundAndValidFaceResponse, error)
	ExitApp(ctx context.Context, in *EmptyMessageNN, opts ...grpc.CallOption) (*EmptyMessageNN, error)
}

type grpcServiceNNClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServiceNNClient(cc grpc.ClientConnInterface) GrpcServiceNNClient {
	return &grpcServiceNNClient{cc}
}

func (c *grpcServiceNNClient) PingNN(ctx context.Context, in *EmptyMessageNN, opts ...grpc.CallOption) (*EmptyMessageNN, error) {
	out := new(EmptyMessageNN)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcServiceNN/PingNN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceNNClient) GetFace(ctx context.Context, in *GetFaceRequest, opts ...grpc.CallOption) (*GetFaceResponse, error) {
	out := new(GetFaceResponse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcServiceNN/GetFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceNNClient) PredictFromBytes(ctx context.Context, in *PredictFromBytesRequest, opts ...grpc.CallOption) (*PhotosToModelResponse, error) {
	out := new(PhotosToModelResponse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcServiceNN/PredictFromBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceNNClient) LoadWeigths(ctx context.Context, in *EmptyMessageNN, opts ...grpc.CallOption) (*EmptyMessageNN, error) {
	out := new(EmptyMessageNN)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcServiceNN/LoadWeigths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceNNClient) FitAllToModel(ctx context.Context, in *FitAllToModelRequest, opts ...grpc.CallOption) (*EmptyMessageNN, error) {
	out := new(EmptyMessageNN)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcServiceNN/FitAllToModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceNNClient) GetStatusOfFit(ctx context.Context, in *EmptyMessageNN, opts ...grpc.CallOption) (*FitStatusResponseNN, error) {
	out := new(FitStatusResponseNN)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcServiceNN/GetStatusOfFit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceNNClient) CutBackgroundAndValidFace(ctx context.Context, in *CutBackgroundAndValidFaceRequest, opts ...grpc.CallOption) (*CutBackgroundAndValidFaceResponse, error) {
	out := new(CutBackgroundAndValidFaceResponse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcServiceNN/CutBackgroundAndValidFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceNNClient) ExitApp(ctx context.Context, in *EmptyMessageNN, opts ...grpc.CallOption) (*EmptyMessageNN, error) {
	out := new(EmptyMessageNN)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcServiceNN/ExitApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcServiceNNServer is the server API for GrpcServiceNN service.
// All implementations must embed UnimplementedGrpcServiceNNServer
// for forward compatibility
type GrpcServiceNNServer interface {
	PingNN(context.Context, *EmptyMessageNN) (*EmptyMessageNN, error)
	GetFace(context.Context, *GetFaceRequest) (*GetFaceResponse, error)
	PredictFromBytes(context.Context, *PredictFromBytesRequest) (*PhotosToModelResponse, error)
	LoadWeigths(context.Context, *EmptyMessageNN) (*EmptyMessageNN, error)
	FitAllToModel(context.Context, *FitAllToModelRequest) (*EmptyMessageNN, error)
	GetStatusOfFit(context.Context, *EmptyMessageNN) (*FitStatusResponseNN, error)
	CutBackgroundAndValidFace(context.Context, *CutBackgroundAndValidFaceRequest) (*CutBackgroundAndValidFaceResponse, error)
	ExitApp(context.Context, *EmptyMessageNN) (*EmptyMessageNN, error)
	mustEmbedUnimplementedGrpcServiceNNServer()
}

// UnimplementedGrpcServiceNNServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServiceNNServer struct {
}

func (UnimplementedGrpcServiceNNServer) PingNN(context.Context, *EmptyMessageNN) (*EmptyMessageNN, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingNN not implemented")
}
func (UnimplementedGrpcServiceNNServer) GetFace(context.Context, *GetFaceRequest) (*GetFaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFace not implemented")
}
func (UnimplementedGrpcServiceNNServer) PredictFromBytes(context.Context, *PredictFromBytesRequest) (*PhotosToModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictFromBytes not implemented")
}
func (UnimplementedGrpcServiceNNServer) LoadWeigths(context.Context, *EmptyMessageNN) (*EmptyMessageNN, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadWeigths not implemented")
}
func (UnimplementedGrpcServiceNNServer) FitAllToModel(context.Context, *FitAllToModelRequest) (*EmptyMessageNN, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FitAllToModel not implemented")
}
func (UnimplementedGrpcServiceNNServer) GetStatusOfFit(context.Context, *EmptyMessageNN) (*FitStatusResponseNN, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusOfFit not implemented")
}
func (UnimplementedGrpcServiceNNServer) CutBackgroundAndValidFace(context.Context, *CutBackgroundAndValidFaceRequest) (*CutBackgroundAndValidFaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CutBackgroundAndValidFace not implemented")
}
func (UnimplementedGrpcServiceNNServer) ExitApp(context.Context, *EmptyMessageNN) (*EmptyMessageNN, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitApp not implemented")
}
func (UnimplementedGrpcServiceNNServer) mustEmbedUnimplementedGrpcServiceNNServer() {}

// UnsafeGrpcServiceNNServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServiceNNServer will
// result in compilation errors.
type UnsafeGrpcServiceNNServer interface {
	mustEmbedUnimplementedGrpcServiceNNServer()
}

func RegisterGrpcServiceNNServer(s grpc.ServiceRegistrar, srv GrpcServiceNNServer) {
	s.RegisterService(&GrpcServiceNN_ServiceDesc, srv)
}

func _GrpcServiceNN_PingNN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessageNN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceNNServer).PingNN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcServiceNN/PingNN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceNNServer).PingNN(ctx, req.(*EmptyMessageNN))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServiceNN_GetFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceNNServer).GetFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcServiceNN/GetFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceNNServer).GetFace(ctx, req.(*GetFaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServiceNN_PredictFromBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictFromBytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceNNServer).PredictFromBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcServiceNN/PredictFromBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceNNServer).PredictFromBytes(ctx, req.(*PredictFromBytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServiceNN_LoadWeigths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessageNN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceNNServer).LoadWeigths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcServiceNN/LoadWeigths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceNNServer).LoadWeigths(ctx, req.(*EmptyMessageNN))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServiceNN_FitAllToModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FitAllToModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceNNServer).FitAllToModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcServiceNN/FitAllToModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceNNServer).FitAllToModel(ctx, req.(*FitAllToModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServiceNN_GetStatusOfFit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessageNN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceNNServer).GetStatusOfFit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcServiceNN/GetStatusOfFit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceNNServer).GetStatusOfFit(ctx, req.(*EmptyMessageNN))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServiceNN_CutBackgroundAndValidFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CutBackgroundAndValidFaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceNNServer).CutBackgroundAndValidFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcServiceNN/CutBackgroundAndValidFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceNNServer).CutBackgroundAndValidFace(ctx, req.(*CutBackgroundAndValidFaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServiceNN_ExitApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessageNN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceNNServer).ExitApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcServiceNN/ExitApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceNNServer).ExitApp(ctx, req.(*EmptyMessageNN))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcServiceNN_ServiceDesc is the grpc.ServiceDesc for GrpcServiceNN service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcServiceNN_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpctransport.GrpcServiceNN",
	HandlerType: (*GrpcServiceNNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingNN",
			Handler:    _GrpcServiceNN_PingNN_Handler,
		},
		{
			MethodName: "GetFace",
			Handler:    _GrpcServiceNN_GetFace_Handler,
		},
		{
			MethodName: "PredictFromBytes",
			Handler:    _GrpcServiceNN_PredictFromBytes_Handler,
		},
		{
			MethodName: "LoadWeigths",
			Handler:    _GrpcServiceNN_LoadWeigths_Handler,
		},
		{
			MethodName: "FitAllToModel",
			Handler:    _GrpcServiceNN_FitAllToModel_Handler,
		},
		{
			MethodName: "GetStatusOfFit",
			Handler:    _GrpcServiceNN_GetStatusOfFit_Handler,
		},
		{
			MethodName: "CutBackgroundAndValidFace",
			Handler:    _GrpcServiceNN_CutBackgroundAndValidFace_Handler,
		},
		{
			MethodName: "ExitApp",
			Handler:    _GrpcServiceNN_ExitApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpctransport/grpcnn.proto",
}
