// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpctransport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcServiceClient is the client API for GrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcServiceClient interface {
	GetToken(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetTokenResponse, error)
	SetToken(ctx context.Context, in *SetTokenRequest, opts ...grpc.CallOption) (*SetTokenResponse, error)
	GetDownloadedInfoFromDB(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetDownloadInfoFromDBResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	LikeDislike(ctx context.Context, in *LikeDislikeRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	SetDownloadPhotos(ctx context.Context, in *SetDownloadPhotosRequest, opts ...grpc.CallOption) (*SetDownloadPhotosResponse, error)
	StopDownload(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	DrawBox(ctx context.Context, in *DrawBoxRequest, opts ...grpc.CallOption) (*TrueFalse, error)
	PassOrIgnore(ctx context.Context, in *PassOrIgnoreRequest, opts ...grpc.CallOption) (*PassOrIgnoreResponse, error)
	PredictUser(ctx context.Context, in *PredictUserRequest, opts ...grpc.CallOption) (*PredictUserResponse, error)
	DeleteLastLikes(ctx context.Context, in *SetLikeToNullLastNUsers, opts ...grpc.CallOption) (*EmptyMessage, error)
	GetPossibilityDeleteLastLikes(ctx context.Context, in *SetLikeToNullLastNUsers, opts ...grpc.CallOption) (*PossibilityDeleteLastLikes, error)
	DeleteAllLikes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	PermanentlyDeleteAllInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	LikeDislikeCountPhotosFromDB(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*LikeDislikeCountPhotosFromDBResponse, error)
	GetTokenTutorial(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetTokenTutorialResponse, error)
	StartTrain(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error)
	GetTrainingNow(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*TrainResponse, error)
	GetWeigthName(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetWeigthNameResponse, error)
	RunAutoLike(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	StopAutoLike(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	GetAutoLikeIsRun(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetAutoLikeIsRunResponse, error)
	StreamingDownloadInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (GrpcService_StreamingDownloadInfoClient, error)
	StreamingGetFaceDetectRunInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (GrpcService_StreamingGetFaceDetectRunInfoClient, error)
	StreamingGetLoadingPhotos(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (GrpcService_StreamingGetLoadingPhotosClient, error)
	StreamingTrainStatus(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (GrpcService_StreamingTrainStatusClient, error)
	StreamingAutoLike(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (GrpcService_StreamingAutoLikeClient, error)
}

type grpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServiceClient(cc grpc.ClientConnInterface) GrpcServiceClient {
	return &grpcServiceClient{cc}
}

func (c *grpcServiceClient) GetToken(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) SetToken(ctx context.Context, in *SetTokenRequest, opts ...grpc.CallOption) (*SetTokenResponse, error) {
	out := new(SetTokenResponse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/SetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) GetDownloadedInfoFromDB(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetDownloadInfoFromDBResponse, error) {
	out := new(GetDownloadInfoFromDBResponse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/GetDownloadedInfoFromDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) LikeDislike(ctx context.Context, in *LikeDislikeRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/LikeDislike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) SetDownloadPhotos(ctx context.Context, in *SetDownloadPhotosRequest, opts ...grpc.CallOption) (*SetDownloadPhotosResponse, error) {
	out := new(SetDownloadPhotosResponse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/SetDownloadPhotos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) StopDownload(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/StopDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) DrawBox(ctx context.Context, in *DrawBoxRequest, opts ...grpc.CallOption) (*TrueFalse, error) {
	out := new(TrueFalse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/DrawBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) PassOrIgnore(ctx context.Context, in *PassOrIgnoreRequest, opts ...grpc.CallOption) (*PassOrIgnoreResponse, error) {
	out := new(PassOrIgnoreResponse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/PassOrIgnore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) PredictUser(ctx context.Context, in *PredictUserRequest, opts ...grpc.CallOption) (*PredictUserResponse, error) {
	out := new(PredictUserResponse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/PredictUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) DeleteLastLikes(ctx context.Context, in *SetLikeToNullLastNUsers, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/DeleteLastLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) GetPossibilityDeleteLastLikes(ctx context.Context, in *SetLikeToNullLastNUsers, opts ...grpc.CallOption) (*PossibilityDeleteLastLikes, error) {
	out := new(PossibilityDeleteLastLikes)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/GetPossibilityDeleteLastLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) DeleteAllLikes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/DeleteAllLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) PermanentlyDeleteAllInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/PermanentlyDeleteAllInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) LikeDislikeCountPhotosFromDB(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*LikeDislikeCountPhotosFromDBResponse, error) {
	out := new(LikeDislikeCountPhotosFromDBResponse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/LikeDislikeCountPhotosFromDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) GetTokenTutorial(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetTokenTutorialResponse, error) {
	out := new(GetTokenTutorialResponse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/GetTokenTutorial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) StartTrain(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error) {
	out := new(TrainResponse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/StartTrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) GetTrainingNow(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*TrainResponse, error) {
	out := new(TrainResponse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/GetTrainingNow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) GetWeigthName(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetWeigthNameResponse, error) {
	out := new(GetWeigthNameResponse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/GetWeigthName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) RunAutoLike(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/RunAutoLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) StopAutoLike(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/StopAutoLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) GetAutoLikeIsRun(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetAutoLikeIsRunResponse, error) {
	out := new(GetAutoLikeIsRunResponse)
	err := c.cc.Invoke(ctx, "/grpctransport.GrpcService/GetAutoLikeIsRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) StreamingDownloadInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (GrpcService_StreamingDownloadInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[0], "/grpctransport.GrpcService/StreamingDownloadInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceStreamingDownloadInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcService_StreamingDownloadInfoClient interface {
	Recv() (*DownloadInfoResponse, error)
	grpc.ClientStream
}

type grpcServiceStreamingDownloadInfoClient struct {
	grpc.ClientStream
}

func (x *grpcServiceStreamingDownloadInfoClient) Recv() (*DownloadInfoResponse, error) {
	m := new(DownloadInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServiceClient) StreamingGetFaceDetectRunInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (GrpcService_StreamingGetFaceDetectRunInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[1], "/grpctransport.GrpcService/StreamingGetFaceDetectRunInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceStreamingGetFaceDetectRunInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcService_StreamingGetFaceDetectRunInfoClient interface {
	Recv() (*GetFaceDetectRunInfoResponse, error)
	grpc.ClientStream
}

type grpcServiceStreamingGetFaceDetectRunInfoClient struct {
	grpc.ClientStream
}

func (x *grpcServiceStreamingGetFaceDetectRunInfoClient) Recv() (*GetFaceDetectRunInfoResponse, error) {
	m := new(GetFaceDetectRunInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServiceClient) StreamingGetLoadingPhotos(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (GrpcService_StreamingGetLoadingPhotosClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[2], "/grpctransport.GrpcService/StreamingGetLoadingPhotos", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceStreamingGetLoadingPhotosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcService_StreamingGetLoadingPhotosClient interface {
	Recv() (*GetLoadingPhotosResponse, error)
	grpc.ClientStream
}

type grpcServiceStreamingGetLoadingPhotosClient struct {
	grpc.ClientStream
}

func (x *grpcServiceStreamingGetLoadingPhotosClient) Recv() (*GetLoadingPhotosResponse, error) {
	m := new(GetLoadingPhotosResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServiceClient) StreamingTrainStatus(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (GrpcService_StreamingTrainStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[3], "/grpctransport.GrpcService/StreamingTrainStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceStreamingTrainStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcService_StreamingTrainStatusClient interface {
	Recv() (*FitStatusResponse, error)
	grpc.ClientStream
}

type grpcServiceStreamingTrainStatusClient struct {
	grpc.ClientStream
}

func (x *grpcServiceStreamingTrainStatusClient) Recv() (*FitStatusResponse, error) {
	m := new(FitStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServiceClient) StreamingAutoLike(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (GrpcService_StreamingAutoLikeClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[4], "/grpctransport.GrpcService/StreamingAutoLike", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceStreamingAutoLikeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcService_StreamingAutoLikeClient interface {
	Recv() (*AutoLikeResponse, error)
	grpc.ClientStream
}

type grpcServiceStreamingAutoLikeClient struct {
	grpc.ClientStream
}

func (x *grpcServiceStreamingAutoLikeClient) Recv() (*AutoLikeResponse, error) {
	m := new(AutoLikeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcServiceServer is the server API for GrpcService service.
// All implementations must embed UnimplementedGrpcServiceServer
// for forward compatibility
type GrpcServiceServer interface {
	GetToken(context.Context, *EmptyMessage) (*GetTokenResponse, error)
	SetToken(context.Context, *SetTokenRequest) (*SetTokenResponse, error)
	GetDownloadedInfoFromDB(context.Context, *EmptyMessage) (*GetDownloadInfoFromDBResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	LikeDislike(context.Context, *LikeDislikeRequest) (*EmptyMessage, error)
	SetDownloadPhotos(context.Context, *SetDownloadPhotosRequest) (*SetDownloadPhotosResponse, error)
	StopDownload(context.Context, *EmptyMessage) (*EmptyMessage, error)
	DrawBox(context.Context, *DrawBoxRequest) (*TrueFalse, error)
	PassOrIgnore(context.Context, *PassOrIgnoreRequest) (*PassOrIgnoreResponse, error)
	PredictUser(context.Context, *PredictUserRequest) (*PredictUserResponse, error)
	DeleteLastLikes(context.Context, *SetLikeToNullLastNUsers) (*EmptyMessage, error)
	GetPossibilityDeleteLastLikes(context.Context, *SetLikeToNullLastNUsers) (*PossibilityDeleteLastLikes, error)
	DeleteAllLikes(context.Context, *EmptyMessage) (*EmptyMessage, error)
	PermanentlyDeleteAllInfo(context.Context, *EmptyMessage) (*EmptyMessage, error)
	LikeDislikeCountPhotosFromDB(context.Context, *EmptyMessage) (*LikeDislikeCountPhotosFromDBResponse, error)
	GetTokenTutorial(context.Context, *EmptyMessage) (*GetTokenTutorialResponse, error)
	StartTrain(context.Context, *TrainRequest) (*TrainResponse, error)
	GetTrainingNow(context.Context, *EmptyMessage) (*TrainResponse, error)
	GetWeigthName(context.Context, *EmptyMessage) (*GetWeigthNameResponse, error)
	RunAutoLike(context.Context, *EmptyMessage) (*EmptyMessage, error)
	StopAutoLike(context.Context, *EmptyMessage) (*EmptyMessage, error)
	GetAutoLikeIsRun(context.Context, *EmptyMessage) (*GetAutoLikeIsRunResponse, error)
	StreamingDownloadInfo(*EmptyMessage, GrpcService_StreamingDownloadInfoServer) error
	StreamingGetFaceDetectRunInfo(*EmptyMessage, GrpcService_StreamingGetFaceDetectRunInfoServer) error
	StreamingGetLoadingPhotos(*EmptyMessage, GrpcService_StreamingGetLoadingPhotosServer) error
	StreamingTrainStatus(*EmptyMessage, GrpcService_StreamingTrainStatusServer) error
	StreamingAutoLike(*EmptyMessage, GrpcService_StreamingAutoLikeServer) error
	mustEmbedUnimplementedGrpcServiceServer()
}

// UnimplementedGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServiceServer struct {
}

func (UnimplementedGrpcServiceServer) GetToken(context.Context, *EmptyMessage) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedGrpcServiceServer) SetToken(context.Context, *SetTokenRequest) (*SetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetToken not implemented")
}
func (UnimplementedGrpcServiceServer) GetDownloadedInfoFromDB(context.Context, *EmptyMessage) (*GetDownloadInfoFromDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadedInfoFromDB not implemented")
}
func (UnimplementedGrpcServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedGrpcServiceServer) LikeDislike(context.Context, *LikeDislikeRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeDislike not implemented")
}
func (UnimplementedGrpcServiceServer) SetDownloadPhotos(context.Context, *SetDownloadPhotosRequest) (*SetDownloadPhotosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDownloadPhotos not implemented")
}
func (UnimplementedGrpcServiceServer) StopDownload(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDownload not implemented")
}
func (UnimplementedGrpcServiceServer) DrawBox(context.Context, *DrawBoxRequest) (*TrueFalse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrawBox not implemented")
}
func (UnimplementedGrpcServiceServer) PassOrIgnore(context.Context, *PassOrIgnoreRequest) (*PassOrIgnoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassOrIgnore not implemented")
}
func (UnimplementedGrpcServiceServer) PredictUser(context.Context, *PredictUserRequest) (*PredictUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictUser not implemented")
}
func (UnimplementedGrpcServiceServer) DeleteLastLikes(context.Context, *SetLikeToNullLastNUsers) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLastLikes not implemented")
}
func (UnimplementedGrpcServiceServer) GetPossibilityDeleteLastLikes(context.Context, *SetLikeToNullLastNUsers) (*PossibilityDeleteLastLikes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPossibilityDeleteLastLikes not implemented")
}
func (UnimplementedGrpcServiceServer) DeleteAllLikes(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllLikes not implemented")
}
func (UnimplementedGrpcServiceServer) PermanentlyDeleteAllInfo(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentlyDeleteAllInfo not implemented")
}
func (UnimplementedGrpcServiceServer) LikeDislikeCountPhotosFromDB(context.Context, *EmptyMessage) (*LikeDislikeCountPhotosFromDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeDislikeCountPhotosFromDB not implemented")
}
func (UnimplementedGrpcServiceServer) GetTokenTutorial(context.Context, *EmptyMessage) (*GetTokenTutorialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenTutorial not implemented")
}
func (UnimplementedGrpcServiceServer) StartTrain(context.Context, *TrainRequest) (*TrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTrain not implemented")
}
func (UnimplementedGrpcServiceServer) GetTrainingNow(context.Context, *EmptyMessage) (*TrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainingNow not implemented")
}
func (UnimplementedGrpcServiceServer) GetWeigthName(context.Context, *EmptyMessage) (*GetWeigthNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeigthName not implemented")
}
func (UnimplementedGrpcServiceServer) RunAutoLike(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAutoLike not implemented")
}
func (UnimplementedGrpcServiceServer) StopAutoLike(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAutoLike not implemented")
}
func (UnimplementedGrpcServiceServer) GetAutoLikeIsRun(context.Context, *EmptyMessage) (*GetAutoLikeIsRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutoLikeIsRun not implemented")
}
func (UnimplementedGrpcServiceServer) StreamingDownloadInfo(*EmptyMessage, GrpcService_StreamingDownloadInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingDownloadInfo not implemented")
}
func (UnimplementedGrpcServiceServer) StreamingGetFaceDetectRunInfo(*EmptyMessage, GrpcService_StreamingGetFaceDetectRunInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingGetFaceDetectRunInfo not implemented")
}
func (UnimplementedGrpcServiceServer) StreamingGetLoadingPhotos(*EmptyMessage, GrpcService_StreamingGetLoadingPhotosServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingGetLoadingPhotos not implemented")
}
func (UnimplementedGrpcServiceServer) StreamingTrainStatus(*EmptyMessage, GrpcService_StreamingTrainStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingTrainStatus not implemented")
}
func (UnimplementedGrpcServiceServer) StreamingAutoLike(*EmptyMessage, GrpcService_StreamingAutoLikeServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingAutoLike not implemented")
}
func (UnimplementedGrpcServiceServer) mustEmbedUnimplementedGrpcServiceServer() {}

// UnsafeGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServiceServer will
// result in compilation errors.
type UnsafeGrpcServiceServer interface {
	mustEmbedUnimplementedGrpcServiceServer()
}

func RegisterGrpcServiceServer(s grpc.ServiceRegistrar, srv GrpcServiceServer) {
	s.RegisterService(&GrpcService_ServiceDesc, srv)
}

func _GrpcService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).GetToken(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_SetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).SetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/SetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).SetToken(ctx, req.(*SetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_GetDownloadedInfoFromDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).GetDownloadedInfoFromDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/GetDownloadedInfoFromDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).GetDownloadedInfoFromDB(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_LikeDislike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeDislikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).LikeDislike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/LikeDislike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).LikeDislike(ctx, req.(*LikeDislikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_SetDownloadPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDownloadPhotosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).SetDownloadPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/SetDownloadPhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).SetDownloadPhotos(ctx, req.(*SetDownloadPhotosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_StopDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).StopDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/StopDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).StopDownload(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_DrawBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).DrawBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/DrawBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).DrawBox(ctx, req.(*DrawBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_PassOrIgnore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassOrIgnoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).PassOrIgnore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/PassOrIgnore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).PassOrIgnore(ctx, req.(*PassOrIgnoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_PredictUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).PredictUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/PredictUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).PredictUser(ctx, req.(*PredictUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_DeleteLastLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLikeToNullLastNUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).DeleteLastLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/DeleteLastLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).DeleteLastLikes(ctx, req.(*SetLikeToNullLastNUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_GetPossibilityDeleteLastLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLikeToNullLastNUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).GetPossibilityDeleteLastLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/GetPossibilityDeleteLastLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).GetPossibilityDeleteLastLikes(ctx, req.(*SetLikeToNullLastNUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_DeleteAllLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).DeleteAllLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/DeleteAllLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).DeleteAllLikes(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_PermanentlyDeleteAllInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).PermanentlyDeleteAllInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/PermanentlyDeleteAllInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).PermanentlyDeleteAllInfo(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_LikeDislikeCountPhotosFromDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).LikeDislikeCountPhotosFromDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/LikeDislikeCountPhotosFromDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).LikeDislikeCountPhotosFromDB(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_GetTokenTutorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).GetTokenTutorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/GetTokenTutorial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).GetTokenTutorial(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_StartTrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).StartTrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/StartTrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).StartTrain(ctx, req.(*TrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_GetTrainingNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).GetTrainingNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/GetTrainingNow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).GetTrainingNow(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_GetWeigthName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).GetWeigthName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/GetWeigthName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).GetWeigthName(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_RunAutoLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).RunAutoLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/RunAutoLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).RunAutoLike(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_StopAutoLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).StopAutoLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/StopAutoLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).StopAutoLike(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_GetAutoLikeIsRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).GetAutoLikeIsRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctransport.GrpcService/GetAutoLikeIsRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).GetAutoLikeIsRun(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_StreamingDownloadInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServiceServer).StreamingDownloadInfo(m, &grpcServiceStreamingDownloadInfoServer{stream})
}

type GrpcService_StreamingDownloadInfoServer interface {
	Send(*DownloadInfoResponse) error
	grpc.ServerStream
}

type grpcServiceStreamingDownloadInfoServer struct {
	grpc.ServerStream
}

func (x *grpcServiceStreamingDownloadInfoServer) Send(m *DownloadInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcService_StreamingGetFaceDetectRunInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServiceServer).StreamingGetFaceDetectRunInfo(m, &grpcServiceStreamingGetFaceDetectRunInfoServer{stream})
}

type GrpcService_StreamingGetFaceDetectRunInfoServer interface {
	Send(*GetFaceDetectRunInfoResponse) error
	grpc.ServerStream
}

type grpcServiceStreamingGetFaceDetectRunInfoServer struct {
	grpc.ServerStream
}

func (x *grpcServiceStreamingGetFaceDetectRunInfoServer) Send(m *GetFaceDetectRunInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcService_StreamingGetLoadingPhotos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServiceServer).StreamingGetLoadingPhotos(m, &grpcServiceStreamingGetLoadingPhotosServer{stream})
}

type GrpcService_StreamingGetLoadingPhotosServer interface {
	Send(*GetLoadingPhotosResponse) error
	grpc.ServerStream
}

type grpcServiceStreamingGetLoadingPhotosServer struct {
	grpc.ServerStream
}

func (x *grpcServiceStreamingGetLoadingPhotosServer) Send(m *GetLoadingPhotosResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcService_StreamingTrainStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServiceServer).StreamingTrainStatus(m, &grpcServiceStreamingTrainStatusServer{stream})
}

type GrpcService_StreamingTrainStatusServer interface {
	Send(*FitStatusResponse) error
	grpc.ServerStream
}

type grpcServiceStreamingTrainStatusServer struct {
	grpc.ServerStream
}

func (x *grpcServiceStreamingTrainStatusServer) Send(m *FitStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcService_StreamingAutoLike_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServiceServer).StreamingAutoLike(m, &grpcServiceStreamingAutoLikeServer{stream})
}

type GrpcService_StreamingAutoLikeServer interface {
	Send(*AutoLikeResponse) error
	grpc.ServerStream
}

type grpcServiceStreamingAutoLikeServer struct {
	grpc.ServerStream
}

func (x *grpcServiceStreamingAutoLikeServer) Send(m *AutoLikeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GrpcService_ServiceDesc is the grpc.ServiceDesc for GrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpctransport.GrpcService",
	HandlerType: (*GrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _GrpcService_GetToken_Handler,
		},
		{
			MethodName: "SetToken",
			Handler:    _GrpcService_SetToken_Handler,
		},
		{
			MethodName: "GetDownloadedInfoFromDB",
			Handler:    _GrpcService_GetDownloadedInfoFromDB_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _GrpcService_GetUsers_Handler,
		},
		{
			MethodName: "LikeDislike",
			Handler:    _GrpcService_LikeDislike_Handler,
		},
		{
			MethodName: "SetDownloadPhotos",
			Handler:    _GrpcService_SetDownloadPhotos_Handler,
		},
		{
			MethodName: "StopDownload",
			Handler:    _GrpcService_StopDownload_Handler,
		},
		{
			MethodName: "DrawBox",
			Handler:    _GrpcService_DrawBox_Handler,
		},
		{
			MethodName: "PassOrIgnore",
			Handler:    _GrpcService_PassOrIgnore_Handler,
		},
		{
			MethodName: "PredictUser",
			Handler:    _GrpcService_PredictUser_Handler,
		},
		{
			MethodName: "DeleteLastLikes",
			Handler:    _GrpcService_DeleteLastLikes_Handler,
		},
		{
			MethodName: "GetPossibilityDeleteLastLikes",
			Handler:    _GrpcService_GetPossibilityDeleteLastLikes_Handler,
		},
		{
			MethodName: "DeleteAllLikes",
			Handler:    _GrpcService_DeleteAllLikes_Handler,
		},
		{
			MethodName: "PermanentlyDeleteAllInfo",
			Handler:    _GrpcService_PermanentlyDeleteAllInfo_Handler,
		},
		{
			MethodName: "LikeDislikeCountPhotosFromDB",
			Handler:    _GrpcService_LikeDislikeCountPhotosFromDB_Handler,
		},
		{
			MethodName: "GetTokenTutorial",
			Handler:    _GrpcService_GetTokenTutorial_Handler,
		},
		{
			MethodName: "StartTrain",
			Handler:    _GrpcService_StartTrain_Handler,
		},
		{
			MethodName: "GetTrainingNow",
			Handler:    _GrpcService_GetTrainingNow_Handler,
		},
		{
			MethodName: "GetWeigthName",
			Handler:    _GrpcService_GetWeigthName_Handler,
		},
		{
			MethodName: "RunAutoLike",
			Handler:    _GrpcService_RunAutoLike_Handler,
		},
		{
			MethodName: "StopAutoLike",
			Handler:    _GrpcService_StopAutoLike_Handler,
		},
		{
			MethodName: "GetAutoLikeIsRun",
			Handler:    _GrpcService_GetAutoLikeIsRun_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingDownloadInfo",
			Handler:       _GrpcService_StreamingDownloadInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamingGetFaceDetectRunInfo",
			Handler:       _GrpcService_StreamingGetFaceDetectRunInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamingGetLoadingPhotos",
			Handler:       _GrpcService_StreamingGetLoadingPhotos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamingTrainStatus",
			Handler:       _GrpcService_StreamingTrainStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamingAutoLike",
			Handler:       _GrpcService_StreamingAutoLike_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpctransport/grpc.proto",
}
